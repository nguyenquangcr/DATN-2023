{"ast":null,"code":"import axios from 'axios';\nimport { domainFE } from 'Constant'; // ----------------------------------------------------------------------\n\nconst getLocalStorage = key => {\n  try {\n    return localStorage.getItem(key);\n  } catch {\n    // if the item doesn't exist, return null\n    return null;\n  }\n};\n\nconst getLocalToken = () => {\n  const accessToken = getLocalStorage('accessToken');\n\n  if (accessToken) {\n    return `Bearer ${accessToken}`;\n  }\n\n  return null;\n};\n\nconst axiosInstance = axios.create({});\naxiosInstance.interceptors.request.use(config => {\n  // Do something before request is sent\n  config.headers['Authorization'] = getLocalToken();\n  return config;\n}, error => {\n  // Do something with request error\n  return Promise.reject(error);\n}); // axiosInstance.interceptors.response.use(\n//     (response) => response,\n//     (error) => {\n//         if (error?.response?.statusText == 'Unauthorized' && error?.response?.status == 401) {\n//             localStorage.removeItem('redux-auth');\n//             localStorage.removeItem('accessToken');\n//             window.location = domainFE;\n//         }\n//     // if (\n//     //   error?.response?.status !== undefined &&\n//     //   error?.response?.status == 401\n//     // ) {\n//     //   window.location = CENTRAL_LOGOUT_ENDPOINT;\n//     //   storage.removeItem('redux-auth');\n//     //   storage.removeItem('accessToken');\n//     // }\n//     // return Promise.reject(\n//     //   (error.response && error.response.data) || 'Something went wrong'\n//     // );\n//     }\n// );\n\nexport default axiosInstance; // export const requestAll = (requests, keys) => {\n//   return Promise.all(requests)\n//     .then(values => {\n//       return keys.map((k, index) => {\n//         return {\n//           [k]: values[index]\n//         };\n//       });\n//     })\n//     .catch(err => {\n//       console.log(err);\n//     });\n// };","map":{"version":3,"sources":["E:/meovathay/application/services/Login/httpServices.js"],"names":["axios","domainFE","getLocalStorage","key","localStorage","getItem","getLocalToken","accessToken","axiosInstance","create","interceptors","request","use","config","headers","error","Promise","reject"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,UAAvB,C,CACA;;AAEA,MAAMC,eAAe,GAAIC,GAAD,IAAS;AAC7B,MAAI;AACA,WAAOC,YAAY,CAACC,OAAb,CAAqBF,GAArB,CAAP;AACH,GAFD,CAEE,MAAM;AACR;AACI,WAAO,IAAP;AACH;AACJ,CAPD;;AASA,MAAMG,aAAa,GAAG,MAAM;AACxB,QAAMC,WAAW,GAAGL,eAAe,CAAC,aAAD,CAAnC;;AAEA,MAAIK,WAAJ,EAAiB;AACb,WAAQ,UAASA,WAAY,EAA7B;AACH;;AACD,SAAO,IAAP;AACH,CAPD;;AASA,MAAMC,aAAa,GAAGR,KAAK,CAACS,MAAN,CAAa,EAAb,CAAtB;AAEAD,aAAa,CAACE,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CACKC,MAAD,IAAY;AACZ;AACIA,EAAAA,MAAM,CAACC,OAAP,CAAe,eAAf,IAAkCR,aAAa,EAA/C;AACA,SAAOO,MAAP;AACH,CALL,EAMKE,KAAD,IAAW;AACX;AACI,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CATL,E,CAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeP,aAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import axios from 'axios';\r\nimport {domainFE} from 'Constant';\r\n// ----------------------------------------------------------------------\r\n\r\nconst getLocalStorage = (key) => {\r\n    try {\r\n        return localStorage.getItem(key);\r\n    } catch {\r\n    // if the item doesn't exist, return null\r\n        return null;\r\n    }\r\n};\r\n\r\nconst getLocalToken = () => {\r\n    const accessToken = getLocalStorage('accessToken');\r\n\r\n    if (accessToken) {\r\n        return `Bearer ${accessToken}`;\r\n    }\r\n    return null;\r\n};\r\n\r\nconst axiosInstance = axios.create({});\r\n\r\naxiosInstance.interceptors.request.use(\r\n    (config) => {\r\n    // Do something before request is sent\r\n        config.headers['Authorization'] = getLocalToken();\r\n        return config;\r\n    },\r\n    (error) => {\r\n    // Do something with request error\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\n// axiosInstance.interceptors.response.use(\r\n//     (response) => response,\r\n//     (error) => {\r\n//         if (error?.response?.statusText == 'Unauthorized' && error?.response?.status == 401) {\r\n//             localStorage.removeItem('redux-auth');\r\n//             localStorage.removeItem('accessToken');\r\n//             window.location = domainFE;\r\n//         }\r\n//     // if (\r\n//     //   error?.response?.status !== undefined &&\r\n//     //   error?.response?.status == 401\r\n//     // ) {\r\n//     //   window.location = CENTRAL_LOGOUT_ENDPOINT;\r\n//     //   storage.removeItem('redux-auth');\r\n//     //   storage.removeItem('accessToken');\r\n//     // }\r\n//     // return Promise.reject(\r\n//     //   (error.response && error.response.data) || 'Something went wrong'\r\n//     // );\r\n//     }\r\n// );\r\n\r\nexport default axiosInstance;\r\n\r\n// export const requestAll = (requests, keys) => {\r\n//   return Promise.all(requests)\r\n//     .then(values => {\r\n//       return keys.map((k, index) => {\r\n//         return {\r\n//           [k]: values[index]\r\n//         };\r\n//       });\r\n//     })\r\n//     .catch(err => {\r\n//       console.log(err);\r\n//     });\r\n// };\r\n"]},"metadata":{},"sourceType":"module"}